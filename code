import numpy as np
import time 
import cv2
import RPi.GPIO as GPIO
import json


from firebase import firebase
firebase = firebase.FirebaseApplication('https://test-f0980.firebaseio.com/', None)


                     
    
    
GPIO.setwarnings(False) # Ignore warning for now

GPIO.setmode(GPIO.BOARD) # Use physical pin numbering

#Traffic Lights for Lane A
GreenA=8
YellowA=12
RedA=10
#Traffic Lights for Lane B
GreenB=22
YellowB=26
RedB=24
#Setting Up GPIO for Traffic Lights
GPIO.setup(8, GPIO.OUT, initial=GPIO.LOW)
GPIO.setup(10, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(12, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(22, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(24, GPIO.OUT, initial=GPIO.LOW) 
GPIO.setup(26, GPIO.OUT, initial=GPIO.LOW) 


for x in range(2):
    GPIO.output(GreenA, GPIO.HIGH) 
    GPIO.output(GreenB, GPIO.HIGH)
    time.sleep(1) # Sleep for 1 second
    GPIO.output(GreenA, GPIO.LOW) 
    GPIO.output(GreenB, GPIO.LOW)
    time.sleep(1) # Sleep for 1 second
 
    GPIO.output(YellowA, GPIO.HIGH) 
    GPIO.output(YellowB, GPIO.HIGH)
    time.sleep(1) # Sleep for 1 second
    GPIO.output(YellowA, GPIO.LOW) 
    GPIO.output(YellowB, GPIO.LOW)
    time.sleep(1) # Sleep for 1 second
     
    GPIO.output(RedA, GPIO.HIGH) 
    GPIO.output(RedB, GPIO.HIGH)
    time.sleep(1) # Sleep for 1 second
    GPIO.output(RedA, GPIO.LOW) 
    GPIO.output(RedB, GPIO.LOW)
    time.sleep(1) # Sleep for 1 second
     





cam=cv2.VideoCapture(0)
cam.set(4,480) #Width=480
cam.set(5,480) #Height=480
cam.set(6,30) #FrameRate = 30

time.sleep(0.1)

colorLower = np.array([0,100,100]) #mid blue 
colorUpper = np.array([179,255,255]) #light blue

initvert = 0
inithoriz = 0
counter = 0


xur = 0
yur = 0
xul = 0
yul = 0
xdr = 0
ydr = 0
xdl = 0
ydl = 0

t = 0
t1 = time.time()

while t < 5 and cam.isOpened():
    ret,frame = cam.read()
    frame = np.array(frame) #Transform frame into array
    hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    
    mask = cv2.inRange(hsv,colorLower,colorUpper)   
    
    mask = cv2.blur(mask,(3,3))   
    
    mask= cv2.dilate(mask,None,iterations=10)
    
    mask= cv2.erode(mask,None,iterations=1)
    
    mask= cv2.dilate(mask,None,iterations=5)
    
    
    me,thresh = cv2.threshold(mask,127,255,cv2.THRESH_BINARY)

    cnts = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)[-2]
    
    center = None
    
    print("Centers")

    if len(cnts) > 0:
        for c in cnts:
            (x,y),radius = cv2.minEnclosingCircle(c)
            center = (int(x),int(y))
            print(center)
            radius = int(radius)
            cv2.circle(frame,center,radius,(0,255,0),2)

            x = int(x)
            y = int(y)
            
            if x > 240: #right
                if y > 240: #up
                    xur = x
                    yur = y
                
                if y < 240: #down
                    xdr = x
                    ydr = y
            if x < 240: #left
                if y > 240: #up
                    xul = x
                    yul = y
                
                if y < 240: #down
                    xdl = x
                    ydl = y

               
    t2 = time.time()
    t = t2-t1


print("upright",xur,yur)
print("downright",xdr,ydr)
print("upleft",xul,yul)
print("downleft",xdl,ydl)
print('\n')
print("Remove calibration objects")

time.sleep(5)


while(cam.isOpened()):
    ret,frame = cam.read()
    frame = np.array(frame) #Transform frame into array
    hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)
    
    mask = cv2.inRange(hsv,colorLower,colorUpper)   
    maskhsv = cv2.resize(mask,(250,250))
    
    mask = cv2.blur(mask,(3,3))   
    mask1 = cv2.resize(mask,(250,250))
    #cv2.imshow("mask1",mask)
    
    mask= cv2.dilate(mask,None,iterations=10)
    mask2=cv2.resize(mask,(250,250))
    #cv2.imshow("mask2",mask)
    
    mask= cv2.erode(mask,None,iterations=1)
    mask3 = cv2.resize(mask,(250,250))
    #cv2.imshow("mask3",mask)
    
    mask= cv2.dilate(mask,None,iterations=5)
    mask4=cv2.resize(mask,(250,250))
    #cv2.imshow("mask4",mask)
    
    imstack = np.hstack((maskhsv,mask1,mask2,mask3,mask4))
 #   cv2.imshow("masks",imstack)
    
    
    me,thresh = cv2.threshold(mask,127,255,cv2.THRESH_BINARY)
    #cv2.imshow("thresh",thresh)

    cnts = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)[-2]
    #print(cnts)
    
    center = None

    vert = 0
    horiz = 0 
    
    if len(cnts) > 0:
        for c in cnts:
            (x,y),radius = cv2.minEnclosingCircle(c)
            center = (int(x),int(y))
            radius = int(radius)

            x = int(x)
            y = int(y)
            
            if xul < x < xur: #vertical road
                if y > yur:
                    vert = vert +1 #up
                    cv2.circle(frame,center,radius,(0,255,0),2)
                elif y < ydr:
                    vert = vert +1 #down
                    cv2.circle(frame,center,radius,(0,255,0),2)
                else:
                    vert = vert
            if ydr < y < yur: #horizontal road
                if x > xur:
                    horiz = horiz +1 #right
                    cv2.circle(frame,center,radius,(0,255,0),2)
                elif x < xul:
                    horiz = horiz +1 #left
                    cv2.circle(frame,center,radius,(0,255,0),2)
                else:
                    horiz = horiz
            if vert != initvert:
                print("Cars in vertical lane: ", str(vert))
                initvert = vert
                print("Cars in horizontal lane: ", str(horiz))
                inithoriz = horiz
                print ("----------------------------")
                dataH = {'NumHoriz': horiz}
                Horizontal = json.dumps(dataH)
                result = firebase.post("/Number of Horizontal Cars",Horizontal)
                dataV = {'NumVert': vert}
                Vertical = json.dumps(dataV)
                result = firebase.post("/Number of Vertical Cars",Vertical)
                
                
                

            if horiz != inithoriz:
                print("Cars in vertical lane: ", str(vert))
                initvert = vert
                print("Cars in horizontal lane: ", str(horiz))
                inithoriz = horiz
                print ("----------------------------")
                dataH = {'NumHoriz': horiz}
                Horizontal = json.dumps(dataH)
                result = firebase.post("/Number of Horizontal Cars",Horizontal)
                dataV = {'NumVert': vert}
                Vertical = json.dumps(dataV)
                result = firebase.post("/Number of Vertical Cars",Vertical)
                
            
        if horiz > vert:
            GPIO.output(GreenA,GPIO.LOW) #Green vert
            GPIO.output(YellowA,GPIO.HIGH)
            time.sleep(.5)
            GPIO.output(YellowA,GPIO.LOW)
            time.sleep(.5)
            GPIO.output(RedA,GPIO.HIGH) #Red vert
            GPIO.output(RedB,GPIO.LOW) #Red hor
            GPIO.output(GreenB,GPIO.HIGH) #Green hor
            time.sleep(.5)
            
          
        if vert>horiz:
            GPIO.output(GreenB,GPIO.LOW) #Green hor
            GPIO.output(YellowB,GPIO.HIGH)
            time.sleep(.5)
            GPIO.output(YellowB,GPIO.LOW)
            GPIO.output(RedB,GPIO.HIGH) #Red hor
            GPIO.output(RedA,GPIO.LOW) #Red vert
            time.sleep(.5)
            GPIO.output(GreenA,GPIO.HIGH) #Green vert
           
            

    hsvim = cv2.resize(hsv,(500,500))
    frameim = cv2.resize(frame,(500,500))
    imstack2 = np.hstack((hsvim,frameim))
    cv2.imshow("Frame + hsv",imstack2)

               
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cam.release()
cv2.destroyAllWindows()
GPIO.cleanup()
